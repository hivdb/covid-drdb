// https://dbdiagram.io/d/600896e480d742080a373304

Enum amino_acid_enum {
  A [note: 'A/Ala, Alanine']
  C [note: 'C/Cys, Cysteine']
  D [note: 'D/Asp, Aspartic acid']
  E [note: 'E/Glu, Glutamic acid']
  F [note: 'F/Phe, Phenylalanine']
  G [note: 'G/Gly, Glutamine']
  H [note: 'H/His, Histidine']
  I [note: 'I/Ile, Isoleucine']
  K [note: 'K/Lys, Lysine']
  L [note: 'L/Leu, Leucine']
  M [note: 'M/Met, Methionine']
  N [note: 'N/Asn, Asparagine']
  P [note: 'P/Pro, Proline']
  Q [note: 'Q/Gln, Glutamine']
  R [note: 'R/Arg, Arginine']
  S [note: 'S/Ser, Serine']
  T [note: 'T/Thr, Threonine']
  V [note: 'V/Val, Valine']
  W [note: 'W/Trp, Tryptophan']
  Y [note: 'Y/Tyr, Tyrosine']
  X [note: 'Out-frame deletion']
  stop [note: 'Stop codon']
  del [note: 'Deletion']
  ins [note: 'Insertion']
}

Enum numeric_cmp_enum {
  "=" [note: 'Equal']
  ">" [note: 'More than']
  "<" [note: 'Less than']
  "~" [note: 'About']
}

Table articles as R {
  ref_name varchar [
    pk,
    note: 'Manually assigned name (RefID, RefName) for this reference, usually formed by the surname of first author, two digits year and an optional serial letter for distinguishing studies published in the same year'
  ]
  doi varchar [
    unique,
    note: 'Digital Object Identifier (DOI) of a reference'
  ]
  url varchar [
    unique,
    note: 'Web address of a reference; can be specified when DOI is not available'
  ]
  first_author varchar [
    not null,
    note: 'First author name. Should formed by the surname, a comma and the initial of given names (no dots)'
  ]
  year int [
    not null,
    note: 'Year of when this reference was published'
  ]
  date_added date [not null]
  date_updated date
}

Table article_notes as RN {
  ref_name varchar [ref: > R.ref_name]
  note varchar
}

Table article_stats as RStat {
  ref_name varchar [ref: > R.ref_name]

  stat_group varchar
  count int

  indexes {
    (ref_name, stat_group) [pk]
    count
  }
}

Table treatments as Rx {
  ref_name varchar [ref: > R.ref_name]
  rx_name varchar [note: 'Name of the treatment']

  indexes {
    (ref_name, rx_name) [pk]
  }
  //treatment_type varchar [
  //  not null,
  //  ref: > RxType.treatment_type,
  //  note: 'Type of the treatment'
  //]
}

//Table lu_treatment_types as RxType {
//  treatment_type varchar [
//    pk,
//    note: 'Type of a treatment'
//  ]
//}


// TODO: add rx_vaccines to allow many-to-many relationship
// between rxvp and vaccines tables

Enum vaccine_type_enum {
  "mRNA"
  "Viral vector"
  "Protein subunit"
  "Inactivated virus"
}

Table vaccines as V {
  vaccine_name varchar [pk]
  vaccine_type vaccine_type_enum
  developer varchar
  developer_country varchar
  priority int [
    note: "Display priority; lower number first"
  ]
}

Table vaccine_efficacy as VE {
  vaccine_name varchar [ref: > V.vaccine_name]
  iso_name varchar [ref: > I.iso_name]
  ref_name varchar [ref: > R.ref_name]
  design varchar
  lower_bound numeric(2,0)
  upper_bound numeric(2,0)
}

Table vaccine_stats as VStat {
  vaccine_name varchar [ref: > V.vaccine_name]
  stat_group varchar
  count int

  indexes {
    (vaccine_name, stat_group) [pk]
  }
}

Table rx_antibodies as RxMAb {
  ref_name varchar
  rx_name varchar
  ab_name varchar [ref: > MAb.ab_name]

  indexes {
    (ref_name, rx_name, ab_name) [pk]
  }
}

Enum severity_enum {
  "Asymptomatic"
  "Mild"
  "Moderate"
  "Severe"
  "Hospitalized"
  "Non-Hospitalized"
}

Enum subject_species_enum {
  "Human"
  "Mouse"
  "Rat"
  "Macaque"
  "Hamster"
}

Table subjects as Pt {
  ref_name varchar [ref: > R.ref_name]
  subject_name varchar
  subject_species subject_species_enum
  num_subjects int [
    note: "Indicates if this record is for an individual subject (=1) or a group of subjects (>1)."
  ]

  indexes {
    (ref_name, subject_name) [pk]
  }
}

Enum event_enum {
  "1st dose"
  "1st dose isolation"
  "2nd dose"
  "2nd dose isolation"
  "2nd dose saliva isolation"
  "3rd dose"
  "3rd dose isolation"
  "infection"
  "isolation"
}

Table subject_history as PtH {
  ref_name varchar
  subject_name varchar
  event event_enum
  event_date_cmp numeric_cmp_enum [
    default: "=",
    note: '"=", ">", or "<"'
  ]
  event_date date
  location varchar [
    note: "Location of where this event happens"
  ]
  iso_name varchar [
    ref: > isolates.iso_name,
    note: "Infected isolate name"
  ]
  vaccine_name varchar [
    ref: > vaccines.vaccine_name,
    note: "Vaccine name"
  ]
  severity severity_enum

  indexes {
    (ref_name, subject_name, event, event_date) [pk]
  }
}

ref: PtH.(ref_name, subject_name) > Pt.(ref_name, subject_name)

Table rx_plasma as RxP {
  ref_name varchar
  rx_name varchar
  subject_name varchar
  titer varchar
  collection_date date
  cumulative_group varchar [note: "Cumulative group for cumulating results"]

  indexes {
    (ref_name, rx_name) [pk]
  }
}
ref: RxP.(ref_name, subject_name) > Pt.(ref_name, subject_name)


Table rx_conv_plasma as RxCP {
  // derived table from rx_conv_plasma and subject_history
  ref_name varchar
  rx_name varchar
  subject_name varchar
  infected_iso_name varchar
  location varchar
  timing numeric(4,0) [note: "time from symptom on set, Month"]
  titer varchar
  severity severity_enum
  collection_date date
  cumulative_group varchar [note: "Cumulative group for cumulating results"]

  indexes {
    (ref_name, rx_name) [pk]
  }
}

Table conv_plasma_stats as CPStat {
  stat_group varchar [pk]
  count int

  indexes {
    count
  }
}

Table rx_vacc_plasma as RxVP {
  ref_name varchar
  rx_name varchar
  subject_name varchar
  vaccine_name varchar [ref: > V.vaccine_name]
  location varchar
  timing numeric(4,0)  [note: "time after vaccination, Month"]
  dosage numeric(2,0)
  collection_date date
  cumulative_group varchar [note: "Cumulative group for cumulating results"]
  // todo_more_ip_definition varchar

  indexes {
    (ref_name, rx_name) [pk]
  }
}


Table rx_dms as RxDMS {
  ref_name varchar
  rx_name varchar
  ab_name varchar [ref: > MAb.ab_name]

  indexes {
    (ref_name, rx_name, ab_name) [pk]
  }
}

Ref: RxMAb.(ref_name, rx_name) > Rx.(ref_name, rx_name)
Ref: RxDMS.(ref_name, rx_name) > Rx.(ref_name, rx_name)
Ref: RxP.(ref_name, rx_name) > Rx.(ref_name, rx_name)

Table antibodies as MAb {
  ab_name varchar [
    pk,
    note: 'Name of the antibody'
  ]
  abbreviation_name varchar
  availability varchar
  priority int [
    note: "Display priority; lower number first"
  ]
  visibility bool [
    note: "Should this antibody be displayed or not"
  ]
  // todo_more_mab_definition varchar
  date_added date [not null]
}

Table antibody_stats as MAbStat {
  ab_name varchar [ref: > MAb.ab_name]
  stat_group varchar
  count int

  indexes {
    (ab_name, stat_group) [pk]
    count
  }
}

Table antibody_articles as MabR {
  ref_name varchar [ref: > R.ref_name]
  chiro_rx_name varchar
  ab_name varchar [ref: > MAb.ab_name]

  indexes {
    (ref_name, chiro_rx_name, ab_name) [pk]
  }
}

Table antibody_synonyms as MAbSyn {
  ab_name varchar [ref: > MAb.ab_name]
  synonym varchar [pk]

  indexes {
    ab_name
  }
}

Enum ab_type_enum {
  "mAb"
  "nanobody"
}

Table antibody_invitro as MabVitro {
  ab_name varchar [ref: > MAb.ab_name]
  ab_type ab_type_enum
  ab_source varchar
  ic50 varchar
}

Table antibody_seq as MabSeq {
  ab_name varchar [ref: > MAb.ab_name]
  ighv_gene varchar
  shm numeric(3)
  cdrh3_length numeric(3)
  iglv_gene varchar
}

Table antibody_targets as MAbT {
  ab_name varchar [ref: > MAb.ab_name]
  pdb_id varchar
  target varchar
  class varchar
  source varchar

  indexes {
    (ab_name, pdb_id, target, class, source)
  }
}

Table antibody_epitopes as MAbEpi {
  ab_name varchar [ref: > MAb.ab_name]
  position int [
    note: 'Epitope position'
  ]
}

Table variants as VAR {
  var_name varchar [pk]
}

Table variant_synonyms as VARSYN {
  var_name varchar [ref: > VAR.var_name]
  synonym varchar [unique]

  indexes {
    (var_name, synonym) [pk]
  }
}

Table variant_stats as VARStat {
  var_name varchar [ref: > VAR.var_name]

  stat_group varchar
  count int

  indexes {
    (var_name, stat_group) [pk]
    count
  }
}

Table isolates as I {

  iso_name varchar [
    pk,
    note: 'Isolate name'
  ]
  var_name varchar [
    ref: > VAR.var_name,
    note: 'Variant name of this isolate'
  ]
  site_directed boolean [
    not null,
    note: 'Is this isolate created by site-directed mutagenesis?'
  ]
  gisaid_id int [
    note: 'GISAID isolate accession ID without the common initial "EPI_ISL_"'
  ]
  genbank_accn varchar [
    note: 'Genbank accession number'
  ]
  expandable boolean [
    not null,
    note: 'Expand spike mutations or not'
  ]

  indexes {
    var_name
    gisaid_id
    genbank_accn
  }
}

Table isolate_stats as IStat {
  iso_name varchar [ref: > I.iso_name]

  stat_group varchar
  count int

  indexes {
    (iso_name, stat_group) [pk]
    count
  }
}

Table genes as G {
  gene varchar [
    pk,
    note: 'Canonical gene name (compatible with Sierra-SARS2)'
  ]
  display_name varchar [
    note: 'Display gene name'
  ]
}

Table gene_synonyms as GS {
  gene varchar [
    ref: > G.gene,
    note: 'Gene name'
  ]
  synonym varchar [
    unique,
    note: 'Gene synonym'
  ]

  indexes {
    (gene, synonym) [pk]
  }
}

Table isolate_mutations as M {

  iso_name varchar [
    ref: > I.iso_name,
    note: 'Isolate name'
  ]
  gene varchar [
    ref: > G.gene,
    note: 'Mutation gene'
  ]
  position int [
    note: 'Position of this mutation'
  ]
  amino_acid amino_acid_enum [
    note: 'Amino acid of this mutation'
  ]

  indexes {
    (iso_name, gene, position, amino_acid) [pk]
  }

}

Enum resistance_level_enum {
  "susceptible"
  "partial-resistance"
  "resistant"
}

Enum ineffective_enum {
  "control"
  "experimental"
  "both"
}

Enum assay_enum {
  "pseudovirus"
  "vsv pseudovirus"
  "lentivirus pseudovirus"
  "HIV pseudovirus"
  "authentic virus"
  "chimeric virus"
  "MLV pseudovirus"
}

Enum potency_type_enum {
  "NT50"
  "NT90"
  "IC50"
  "IC90"
}

Table assay as AS {
  ref_name varchar
  assay_name assay_enum
  potency_type potency_type_enum [
    note: 'Potency type (e.g. IC50, IC90)'
  ]
  potency_upper_limit int
  potency_lower_limit int

  indexes {
    (ref_name, assay_name, potency_type) [pk]
  }
}

Table rx_fold as RxF {
  ref_name varchar
  rx_name varchar
  control_iso_name varchar [ref: > I.iso_name]
  iso_name varchar [ref: > I.iso_name]
  section varchar [
    note: 'The cited section in the reference; e.g. Figure 1, table 1 or page 1, para 4'
  ]
  assay_name assay_enum
  potency_type potency_type_enum [
    note: 'Potency type (e.g. IC50, IC90)'
  ]
  fold_cmp numeric_cmp_enum [
    default: "=",
    note: '"=", ">", or "<"'
  ]
  fold numeric(10,1) [
    note: 'Fold change comparing to wild type'
  ]
  resistance_level resistance_level_enum [
    note: 'Qualitative result when quantitative result (fold change) is not available'
  ]
  ineffective ineffective_enum [
    note: 'Rx has no effect on control sequence or experimental sequence'
  ]
  cumulative_count int [
    default: 1,
    note: 'Cumulative count of matching results (when multiple)'
  ]
  date_added date [not null]
  indexes {
    (rx_name, control_iso_name, iso_name, ref_name, potency_type) [pk]
  }
}

Table rx_potency as RxPo {
  ref_name varchar
  rx_name varchar
  iso_name varchar [ref: > I.iso_name]
  section varchar [
    note: 'The cited section in the reference; e.g. Figure 1, table 1 or page 1, para 4'
  ]
  assay_name assay_enum
  potency_type potency_type_enum [
    note: 'Potency type (e.g. IC50, IC90)'
  ]
  potency numeric(10,3) [
    note: 'Potency value, can be IC50, Titer, etc.'
  ]
  cumulative_count int [
    default: 1,
    note: 'Cumulative count of matching results (when multiple)'
  ]
  date_added date [not null]
  indexes {
    (ref_name, rx_name, iso_name, potency_type) [pk]
  }
}

Table ref_potency_pairs as RxPoPair {
  ref_name varchar
  control_iso_name varchar [ref: > I.iso_name]
  iso_name varchar [ref: > I.iso_name]
}


Table susc_results as Susc {
  ref_name varchar
  rx_name varchar
  control_iso_name varchar [ref: > I.iso_name]
  iso_name varchar [ref: > I.iso_name]
  ordinal_number int [
    default: 1,
    note: 'Ordinal number for the same ref/Rx/isolate when multiple results are presented'
  ]
  section varchar [
    note: 'The cited section in the reference; e.g. Figure 1, table 1 or page 1, para 4'
  ]
  fold_cmp numeric_cmp_enum [
    default: "=",
    note: '"=", ">", or "<"'
  ]
  fold numeric(10,1) [
    note: 'Fold change comparing to wild type'
  ]
  potency_type potency_type_enum [
    note: 'Potency type (e.g. IC50, IC90)'
  ]
  resistance_level resistance_level_enum [
    note: 'Qualitative result when quantitative result (fold change) is not available'
  ]
  ineffective ineffective_enum [
    note: 'Rx has no effect on control sequence or experimental sequence'
  ]
  cumulative_count int [
    default: 1,
    note: 'Cumulative count of matching results (when multiple)'
  ]
  assay assay_enum
  date_added date [not null]
  indexes {
    (rx_name, control_iso_name, iso_name, ref_name, ordinal_number, potency_type) [pk]
  }
}

Table invitro_selection_results as Vitro {
  ref_name varchar
  rx_name varchar
  gene varchar [
    note: 'Mutation gene'
  ]
  position int [
    note: 'Position of this mutation'
  ]
  amino_acid amino_acid_enum [
    note: 'Amino acid of this mutation'
  ]
  section varchar [
    note: 'The cited section in the reference; e.g. Figure 1, table 1 or page 1, para 4'
  ]
  date_added date [not null]

  indexes {
    (ref_name, rx_name, gene, position, amino_acid) [pk]
  }
}

Table invivo_selection_results as Vivo {
  // TODO: refactor to use subjects table
  ref_name varchar
  rx_name varchar
  dosage varchar
  host varchar
  infection_name varchar [ref: > I.iso_name]
  gene varchar [
    note: 'Mutation gene'
  ]
  position int [
    note: 'Position of this mutation'
  ]
  amino_acid amino_acid_enum [
    note: 'Amino acid of this mutation'
  ]
  subject varchar
  sampling varchar
  num_subjects int
  num_subjects_with_mut int
  section varchar [
    note: 'The cited section in the reference; e.g. Figure 1, table 1 or page 1, para 4'
  ]
  note varchar
  date_added date [not null]

  indexes {
    (ref_name, rx_name, dosage, subject, sampling)
  }
}

Ref: Susc.(ref_name, rx_name) > Rx.(ref_name, rx_name)
Ref: Vivo.(ref_name, rx_name) > Rx.(ref_name, rx_name)
Ref: Vitro.(ref_name, rx_name) > Rx.(ref_name, rx_name)

Table ref_amino_acid as RefAA {
  gene varchar [
    ref: > G.gene,
    note: 'Mutation gene'
  ]
  position int [
    note: 'Position'
  ]
  amino_acid amino_acid_enum [
    note: 'Amino acid'
  ]

  indexes {
    (gene, position, amino_acid) [pk]
  }
}

Table dms_ace2_binding as Binding {
  gene varchar [
    ref: > G.gene,
    note: 'Mutation gene'
  ]
  position int [
    note: 'Position of this mutation'
  ]
  amino_acid amino_acid_enum [
    note: 'Amino acid of this mutation'
  ]
  ace2_binding numeric(10,2)
  expression numeric(10,2)
  ace2_contact boolean

  indexes {
    (gene, position, amino_acid) [pk]
  }
}

Table dms_escape_results as DMSEscape {
  ref_name varchar
  rx_name varchar
  gene varchar [
    note: 'Mutation gene'
  ]
  position int [
    note: 'Position of this mutation'
  ]
  amino_acid amino_acid_enum [
    note: 'Amino acid of this mutation'
  ]
  escape_score numeric(10,3)

  indexes {
    (ref_name, rx_name, gene, position, amino_acid) [pk]
  }
}

Ref: DMSEscape.(ref_name, rx_name) > Rx.(ref_name, rx_name)

Table last_update {
  scope varchar [pk]
  last_update timestamptz [not null]
}
