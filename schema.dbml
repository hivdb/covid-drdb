// https://dbdiagram.io/d/600896e480d742080a373304

Enum amino_acid_enum {
  A [note: 'A/Ala, Alanine']
  C [note: 'C/Cys, Cysteine']
  D [note: 'D/Asp, Aspartic acid']
  E [note: 'E/Glu, Glutamic acid']
  F [note: 'F/Phe, Phenylalanine']
  G [note: 'G/Gly, Glutamine']
  H [note: 'H/His, Histidine']
  I [note: 'I/Ile, Isoleucine']
  K [note: 'K/Lys, Lysine']
  L [note: 'L/Leu, Leucine']
  M [note: 'M/Met, Methionine']
  N [note: 'N/Asn, Asparagine']
  P [note: 'P/Pro, Proline']
  Q [note: 'Q/Gln, Glutamine']
  R [note: 'R/Arg, Arginine']
  S [note: 'S/Ser, Serine']
  T [note: 'T/Thr, Threonine']
  V [note: 'V/Val, Valine']
  W [note: 'W/Trp, Tryptophan']
  Y [note: 'Y/Tyr, Tyrosine']
  X [note: 'Out-frame deletion']
  stop [note: 'Stop codon']
  del [note: 'Deletion']
  ins [note: 'Insertion']
}

Enum numeric_cmp_enum {
  "=" [note: 'Equal']
  ">" [note: 'More than']
  "<" [note: 'Less than']
  "~" [note: 'About']
}

Table articles as R {
  ref_name varchar [
    pk,
    note: 'Manually assigned name (RefID, RefName) for this reference, usually formed by the surname of first author, two digits year and an optional serial letter for distinguishing studies published in the same year'
  ]
  doi varchar [
    unique,
    note: 'Digital Object Identifier (DOI) of a reference'
  ]
  url varchar [
    unique,
    note: 'Web address of a reference; can be specified when DOI is not available'
  ]
  first_author varchar [
    not null,
    note: 'First author name. Should formed by the surname, a comma and the initial of given names (no dots)'
  ]
  year int [
    not null,
    note: 'Year of when this reference was published'
  ]
  date_added date [not null]
  date_updated date
}

Table treatments as Rx {
  ref_name varchar [ref: > R.ref_name]
  rx_name varchar [note: 'Name of the treatment']

  indexes {
    (ref_name, rx_name) [pk]
  }
}

// TODO: add rx_vaccines to allow many-to-many relationship
// between rxvp and vaccines tables

Enum vaccine_type_enum {
  "mRNA"
  "Viral vector"
  "Protein subunit"
  "Inactivated virus"
  "Mixed"
}

Table vaccines as V {
  vaccine_name varchar [pk]
  vaccine_type vaccine_type_enum
  developer varchar
  developer_country varchar
  st_shot numeric(2,0)  [
    note: "Standard regime shots"
  ]
  priority int [
    note: "Display priority; lower number first"
  ]
}

Table vaccine_efficacy as VE {
  ref_name varchar [ref: > R.ref_name]
  vaccine_name varchar [ref: > V.vaccine_name]
  var_name varchar [ref: > VAR.var_name]
  design varchar
  efficacy varchar
  // lower_bound numeric(2,0)
  // upper_bound numeric(2,0)
}

Table rx_antibodies as RxMAb {
  ref_name varchar
  rx_name varchar
  ab_name varchar [ref: > MAb.ab_name]

  indexes {
    (ref_name, rx_name, ab_name) [pk]
  }
}

Enum severity_enum {
  "Asymptomatic"
  "Mild"
  "Moderate"
  "Severe"
  "Hospitalized"
  "Non-Hospitalized"
}

Enum subject_species_enum {
  "Human"
  "Mouse"
  "Rat"
  "Macaque"
  "Hamster"
  "HyperIG" // Hyperimmune immunoglobulin TODO: this should be another type of Rx
}

Table subjects as Pt {
  ref_name varchar [ref: > R.ref_name]
  subject_name varchar
  subject_species subject_species_enum
  birth_year numeric(4)
  num_subjects int [
    note: "Indicates if this record is for an individual subject (=1) or a group of subjects (>1)."
  ]

  indexes {
    (ref_name, subject_name) [pk]
  }
}

Enum event_enum {
  "1st dose"
  "1st dose isolation"
  "2nd dose"
  "2nd dose isolation"
  "3rd dose"
  "3rd dose isolation"
  "infection"
  "isolation"
  "culture"
}

// TODO: divide this table into several small ones:
// subject_infections, subject_vaccinations,
// subject_isolations (culture is one type of isolation),
// and subject_treatments (already seprated)
Table subject_history as PtH {
  ref_name varchar
  subject_name varchar
  event event_enum
  event_date_cmp numeric_cmp_enum [
    default: "=",
    note: '"=", ">", or "<"'
  ]
  event_date date
  location varchar [
    note: "Location of where this event happens"
  ]
  iso_name varchar [
    ref: > isolates.iso_name,
    note: "Infected isolate name"
  ]
  vaccine_name varchar [
    ref: > vaccines.vaccine_name,
    note: "Vaccine name"
  ]
  severity severity_enum

  indexes {
    (ref_name, subject_name, event, event_date) [pk]
  }
}

ref: PtH.(ref_name, subject_name) > Pt.(ref_name, subject_name)

Enum antibody_dosage_unit_enum {
  "mg/kg"
}

Table subject_treatments as PtRx {
  ref_name varchar
  subject_name varchar
  rx_name varchar
  start_date_cmp numeric_cmp_enum [
    default: "=",
    note: '"=", ">", or "<"'
  ]
  start_date date
  end_date_cmp numeric_cmp_enum [
    default: "=",
    note: '"=", ">", or "<"'
  ]
  dosage numeric(2,0)
  dosage_unit antibody_dosage_unit_enum
  end_date date
}

ref: PtRx.(ref_name, rx_name) > Rx.(ref_name, rx_name)
ref: PtRx.(ref_name, subject_name) > Pt.(ref_name, subject_name)

Table rx_plasma as RxP {
  ref_name varchar
  rx_name varchar
  subject_name varchar
  collection_date date
  cumulative_group varchar [note: "Cumulative group for cumulating results"]

  indexes {
    (ref_name, rx_name) [pk]
  }
}
ref: RxP.(ref_name, subject_name) > Pt.(ref_name, subject_name)

Table rx_dms as RxDMS {
  ref_name varchar
  rx_name varchar
  ab_name varchar [ref: > MAb.ab_name]

  indexes {
    (ref_name, rx_name, ab_name) [pk]
  }
}

Ref: RxMAb.(ref_name, rx_name) > Rx.(ref_name, rx_name)
Ref: RxDMS.(ref_name, rx_name) > Rx.(ref_name, rx_name)
Ref: RxP.(ref_name, rx_name) > Rx.(ref_name, rx_name)

Table antibodies as MAb {
  ab_name varchar [
    pk,
    note: 'Name of the antibody'
  ]
  abbreviation_name varchar
  availability varchar
  mature_month numeric(4,1)
  institute varchar
  origin varchar
  priority int [
    note: "Display priority; lower number first"
  ]
  visibility bool [
    note: "Should this antibody be displayed or not"
  ]
  // todo_more_mab_definition varchar
  date_added date [not null]
}

Table antibody_articles as MabR {
  ref_name varchar [ref: > R.ref_name]
  chiro_rx_name varchar
  ab_name varchar [ref: > MAb.ab_name]

  indexes {
    (ref_name, chiro_rx_name, ab_name) [pk]
  }
}

Table antibody_synonyms as MAbSyn {
  ab_name varchar [ref: > MAb.ab_name]
  synonym varchar [pk]

  indexes {
    ab_name
  }
}

Enum ab_type_enum {
  "mAb"
  "nanobody"
}

Table antibody_invitro as MabVitro {
  ab_name varchar [ref: > MAb.ab_name]
  ab_type ab_type_enum
  ab_source varchar
  ic50 varchar
}

Table antibody_seq as MabSeq {
  ab_name varchar [ref: > MAb.ab_name]
  ighv_gene varchar
  shm numeric(3)
  cdrh3_length numeric(3)
  iglv_gene varchar
}

Enum antibody_class {
  "RBM Class I"
  "RBM Class II"
  "RBM Class III"
  "RBM"
  "RBD Core Cluster I"
  "RBD Core Cluster II"
  "RBD Core"
  "NTD"
  "S1"
  "S2"
  "S"
}

Table antibody_targets as MAbT {
  ab_name varchar [ref: > MAb.ab_name]
  pdb_id varchar
  target varchar
  class antibody_class
  source varchar

  indexes {
    (ab_name, pdb_id, target, class, source)
  }
}

Table antibody_epitopes as MAbEpi {
  ab_name varchar [ref: > MAb.ab_name]
  position int [
    note: 'Epitope position'
  ]
}

Table variants as VAR {
  var_name varchar [pk]
  as_wildtype bool [
    note: 'Should variant be treated as a wild type virus'
  ]
  consensus_availability bool [
    note: 'If consensus mutations of this variant exist in variant_consensus table'
  ]
}

Enum variant_status_enum {
  VOC [note: 'Variant of Concern']
  VOI [note: 'Variant of Interest']
  VBM [note: 'Variant Being Monitored']
  VUI [note: 'Variant under Investigation']
}

Table variant_status as VStatus {
  var_name varchar [
    ref: > VAR.var_name,
    note: 'Variant name'
  ]
  ref_name varchar [
    ref: > R.ref_name,
    note: 'Reference name'
  ]
  status variant_status_enum
  
  indexes {
    (var_name, ref_name, status) [pk]
  }
}

Table variant_consensus as VCons {

  var_name varchar [
    ref: > VAR.var_name,
    note: 'Variant name'
  ]
  gene varchar [
    ref: > G.gene,
    note: 'Mutation gene'
  ]
  position int [
    note: 'Position of this mutation'
  ]
  amino_acid amino_acid_enum [
    note: 'Amino acid of this mutation'
  ]

  indexes {
    (var_name, gene, position, amino_acid) [pk]
  }

}

Table variant_synonyms as VARSYN {
  var_name varchar [ref: > VAR.var_name]
  synonym varchar

  indexes {
    (var_name, synonym) [pk]
  }
}

Table isolates as I {

  iso_name varchar [
    pk,
    note: 'Isolate name'
  ]
  var_name varchar [
    ref: > VAR.var_name,
    note: 'Variant name of this isolate'
  ]
  site_directed boolean [
    not null,
    note: 'Is this isolate created by site-directed mutagenesis?'
  ]
  gisaid_id int [
    note: 'GISAID isolate accession ID without the common initial "EPI_ISL_"'
  ]
  genbank_accn varchar [
    note: 'Genbank accession number'
  ]
  expandable boolean [
    not null,
    note: 'Expand spike mutations or not'
  ]

  indexes {
    var_name
    gisaid_id
    genbank_accn
  }
}

Table genes as G {
  gene varchar [
    pk,
    note: 'Canonical gene name (compatible with Sierra-SARS2)'
  ]
  display_name varchar [
    unique,
    note: 'Display gene name'
  ]
  gene_order integer

  indexes {
    gene_order
  }
}

Table gene_synonyms as GS {
  gene varchar [
    ref: > G.gene,
    note: 'Gene name'
  ]
  synonym varchar [
    unique,
    note: 'Gene synonym'
  ]

  indexes {
    (gene, synonym) [pk]
  }
}

Table isolate_mutations as M {

  iso_name varchar [
    ref: > I.iso_name,
    note: 'Isolate name'
  ]
  gene varchar [
    ref: > G.gene,
    note: 'Mutation gene'
  ]
  position int [
    note: 'Position of this mutation'
  ]
  amino_acid amino_acid_enum [
    note: 'Amino acid of this mutation'
  ]
  count int [
    note: 'When cumulative/NGS data entered, the number of samples/reads carried this mutation'
  ]
  total int [
    note: 'When cumulative/NGS data entered, the number of samples/reads coverage at this position'
  ]

  indexes {
    (iso_name, gene, position, amino_acid) [pk]
  }

}

Enum resistance_level_enum {
  "susceptible"
  "partial-resistance"
  "resistant"
}

Enum ineffective_enum {
  "control"
  "experimental"
  "both"
}

Enum potency_type_enum {
  "NT50"
  "NT80"
  "NT90"
  "NT100"
  "IC50"
  "IC80"
  "IC90"
  "IC100"
}

Enum potency_unit_enum {
  "ng/ml"
  "µM"
  "pM"
}

Enum virus_type_enum {
  "live-virus"
  "pseudovirus"
  "chimeric-virus"
  "surrogate"
}

Table assays as A {
  assay_name varchar [pk]
  virus_type virus_type_enum
}

Table rx_fold as RxF {
  ref_name varchar
  rx_name varchar
  control_iso_name varchar [ref: > I.iso_name]
  iso_name varchar [ref: > I.iso_name]
  section varchar [
    note: 'The cited section in the reference; e.g. Figure 1, table 1 or page 1, para 4'
  ]
  assay_name varchar [ref: > A.assay_name]
  potency_type potency_type_enum [
    note: 'Potency type (e.g. IC50, IC90)'
  ]
  fold_cmp numeric_cmp_enum [
    default: "=",
    note: '"=", ">", or "<"'
  ]
  fold numeric(10,1) [
    note: 'Fold change comparing to wild type'
  ]
  resistance_level resistance_level_enum [
    note: 'Qualitative result when quantitative result (fold change) is not available'
  ]
  ineffective ineffective_enum [
    note: 'Rx has no effect on control sequence or experimental sequence'
  ]
  cumulative_count int [
    default: 1,
    note: 'Cumulative count of matching results (when multiple)'
  ]
  date_added date [not null]
  indexes {
    (rx_name, control_iso_name, iso_name, ref_name, assay_name, potency_type) [pk]
  }
}

Table rx_potency as RxPo {
  ref_name varchar
  rx_name varchar
  iso_name varchar [ref: > I.iso_name]
  section varchar [
    note: 'The cited section in the reference; e.g. Figure 1, table 1 or page 1, para 4'
  ]
  assay_name varchar [ref: > A.assay_name]
  potency_type potency_type_enum [
    note: 'Potency type (e.g. IC50, IC90)'
  ]
  potency numeric(10,3) [
    note: 'Potency against this isolate, can be IC50, Titer, etc.'
  ]
  cumulative_count int [
    default: 1,
    note: 'Cumulative count of matching results (when multiple)'
  ]
  potency_upper_limit numeric(10,3)
  potency_lower_limit numeric(10,3)
  potency_unit potency_unit_enum [
    note: 'Unit used by the potency value. Can be ng/ml, µM or pM'
  ]
  date_added date [not null]
  indexes {
    (ref_name, rx_name, iso_name, assay_name, potency_type) [pk]
  }
}

Table ref_isolate_pairs as RxIsoPair {
  ref_name varchar
  control_iso_name varchar [ref: > I.iso_name]
  iso_name varchar [ref: > I.iso_name]

  indexes {
    (ref_name, control_iso_name, iso_name) [pk]
  }
}

Table ref_unpaired_isolates as RxIsoUnpair {
  ref_name varchar
  iso_name varchar [ref: > I.iso_name]

  indexes {
    (ref_name, iso_name) [pk]
  }
}

Table invitro_selection_results as Vitro {
  ref_name varchar
  rx_name varchar
  gene varchar [
    note: 'Mutation gene'
  ]
  position int [
    note: 'Position of this mutation'
  ]
  amino_acid amino_acid_enum [
    note: 'Amino acid of this mutation'
  ]
  section varchar [
    note: 'The cited section in the reference; e.g. Figure 1, table 1 or page 1, para 4'
  ]
  date_added date [not null]

  indexes {
    (ref_name, rx_name, gene, position, amino_acid) [pk]
  }
}

Table rx_invivo as RxVivo {
  ref_name varchar
  subject_name varchar
  collection_date date
  section varchar [
    note: 'The cited section in the reference; e.g. Figure 1, table 1 or page 1, para 4'
  ]
  note varchar
  date_added date [not null]

  indexes {
    (ref_name, subject_name, collection_date) [pk]
  }
}

Ref: Susc.(ref_name, rx_name) > Rx.(ref_name, rx_name)
Ref: RxVivo.(ref_name, subject_name) > Pt.(ref_name, subject_name)
Ref: Vitro.(ref_name, rx_name) > Rx.(ref_name, rx_name)

Table ref_amino_acid as RefAA {
  gene varchar [
    ref: > G.gene,
    note: 'Mutation gene'
  ]
  position int [
    note: 'Position'
  ]
  amino_acid amino_acid_enum [
    note: 'Amino acid'
  ]

  indexes {
    (gene, position, amino_acid) [pk]
  }
}

Table dms_ace2_binding as Binding {
  gene varchar [
    ref: > G.gene,
    note: 'Mutation gene'
  ]
  position int [
    note: 'Position of this mutation'
  ]
  amino_acid amino_acid_enum [
    note: 'Amino acid of this mutation'
  ]
  ace2_binding numeric(10,2)
  expression numeric(10,2)
  ace2_contact boolean

  indexes {
    (gene, position, amino_acid) [pk]
  }
}

Table dms_escape_results as DMSEscape {
  ref_name varchar
  rx_name varchar
  gene varchar [
    note: 'Mutation gene'
  ]
  position int [
    note: 'Position of this mutation'
  ]
  amino_acid amino_acid_enum [
    note: 'Amino acid of this mutation'
  ]
  escape_score numeric(10,3)

  indexes {
    (ref_name, rx_name, gene, position, amino_acid) [pk]
  }
}

Ref: DMSEscape.(ref_name, rx_name) > Rx.(ref_name, rx_name)

Table ignore_mutations {
  gene varchar [ref: > G.gene]
  position integer
  amino_acid amino_acid_enum

  indexes {
    (gene, position, amino_acid) [pk]
  }
}

Table known_deletion_ranges {
  gene varchar [ref: > G.gene]
  position_start integer
  position_end integer

  indexes {
    (gene, position_start, position_end) [pk]
  }
}

Table last_update {
  scope varchar [pk]
  last_update timestamptz [not null]
}

// Derived tables begin

Enum rx_type_enum {
  "antibody"
  "conv-plasma"
  "vacc-plasma"
}

Enum iso_type_enum {
  "indiv-mut"
  "combo-muts"
}


Table isolate_pairs as IPair {

  control_iso_name varchar [ref: > I.iso_name]
  iso_name varchar [ref: > I.iso_name]
  iso_aggkey varchar
  num_mutations integer

  indexes {
    (control_iso_name, iso_name) [pk]
  }
}


Table susc_summary as SSmry {
  aggregate_by varchar
  rx_type rx_type_enum
  iso_type iso_type_enum

  // aggregate keys
  ref_name varchar [
    note: 'Study/article name'
  ]
  antibody_names varchar [
    note: 'Comma separated antibody names'
  ]
  antibody_order integer [
    note: 'Order when sorting by antibody'
  ]
  vaccine_name varchar [
    note: 'Vaccine name'
  ]
  vaccine_order integer [
    note: 'Order when sorting by vaccine'
  ]
  vaccine_dosage numeric(2,0) [
    note: 'Vaccine shots received when plasma/serum was collected'
  ]
  subject_species subject_species_enum
  timing numeric(4,0) [note: "time after vaccination / from symptom on set, Month"]
  // infected_iso_name varchar [
  //   note: 'Infected isolate name'
  // ]
  // infected_iso_display varchar [
  //   note: 'Display name of infected isolate'
  // ]
  infected_var_name varchar [
    note: 'Variant of the infected isolate'
  ]
  control_iso_name varchar [
    note: 'Control isolate name'
  ]
  control_iso_display varchar [
    note: 'Display name of control isolate'
  ]
  control_var_name varchar [
    note: 'Variant of the control isolate'
  ]
  iso_name varchar [
    note: 'Experimental isolate name'
  ]
  iso_display varchar [
    note: 'Display name of experimental isolate'
  ]
  var_name varchar [
    note: 'Variant of the experimental isolate'
  ]
  iso_aggkey varchar [
    note: 'Rule based isolate aggregation key. This key removes mutations from control isolate and D614G. It also treats a deletion range as one mutation.'
  ]
  iso_agg_display varchar [
    note: 'Display name of rule based isolate aggregation key'
  ]
  position varchar [
    note: 'Gene position for individual mutations'
  ]
  potency_type potency_type_enum [
    note: 'Potency type (e.g. IC50, IC90)'
  ]
  potency_unit potency_unit_enum [
    note: 'Unit used by the potency value. Can be ng/ml, µM or pM'
  ]

  // aggregated data
  num_studies integer [
    note: 'Number of studies; count of distinct ref_name'
  ]
  num_subjects integer [
    note: 'Number of subjects; count of distinct ref_name/subject_name pairs'
  ]
  num_samples integer [
    note: 'Number of samples; count of unique ref_name/rx_name pairs'
  ]
  num_experiments integer [
    note: 'Number of experiments; count of ref_name/rx_name/iso_name/potency_type pairs'
  ]
  all_studies varchar [
    note: 'All study/article name'
  ]
  all_control_potency text [
    note: 'Comma separated control potency of all matched experiments'
  ]
  all_potency text [
    note: 'Comma separated potency of all matched experiments'
  ]
  all_fold text [
    note: 'Comma separated fold changes of all matched experiments'
  ]

  indexes {
    aggregate_by
  }
}


Table article_stats as RStat {
  ref_name varchar [ref: > R.ref_name]

  stat_group varchar
  count int

  indexes {
    (ref_name, stat_group) [pk]
    count
  }
}

Table vaccine_stats as VStat {
  vaccine_name varchar [ref: > V.vaccine_name]
  stat_group varchar
  count int

  indexes {
    (vaccine_name, stat_group) [pk]
  }
}

Table rx_conv_plasma as RxCP {
  // derived table from rx_conv_plasma and subject_history
  ref_name varchar
  rx_name varchar
  subject_name varchar [not null]
  infected_iso_name varchar [ref: > I.iso_name]
  location varchar
  timing numeric(4,0) [note: "time from symptom on set, Month"]
  severity severity_enum
  collection_date date
  cumulative_group varchar [note: "Cumulative group for cumulating results"]

  indexes {
    (ref_name, rx_name) [pk]
  }
}

Table conv_plasma_stats as CPStat {
  stat_group varchar [pk]
  count int

  indexes {
    count
  }
}

Table rx_vacc_plasma as RxVP {
  ref_name varchar
  rx_name varchar
  subject_name varchar
  infected_iso_name varchar [ref: > I.iso_name]
  vaccine_name varchar [ref: > V.vaccine_name]
  location varchar
  timing numeric(4,0)  [note: "time after vaccination, Month"]
  dosage numeric(2,0)
  collection_date date
  cumulative_group varchar [note: "Cumulative group for cumulating results"]
  // todo_more_ip_definition varchar

  indexes {
    (ref_name, rx_name) [pk]
  }
}

Table antibody_stats as MAbStat {
  ab_name varchar [ref: > MAb.ab_name]
  stat_group varchar
  count int

  indexes {
    (ab_name, stat_group) [pk]
    count
  }
}

Table variant_stats as VARStat {
  var_name varchar [ref: > VAR.var_name]

  stat_group varchar
  count int

  indexes {
    (var_name, stat_group) [pk]
    count
  }
}

Table isolate_stats as IStat {
  iso_name varchar [ref: > I.iso_name]

  stat_group varchar
  count int

  indexes {
    (iso_name, stat_group) [pk]
    count
  }
}

Table susc_results as Susc {
  ref_name varchar
  rx_name varchar
  control_iso_name varchar [ref: > I.iso_name]
  iso_name varchar [ref: > I.iso_name]
  section varchar [
    note: 'The cited section in the reference; e.g. Figure 1, table 1 or page 1, para 4'
  ]
  fold_cmp numeric_cmp_enum [
    default: "=",
    note: '"=", ">", or "<"'
  ]
  fold numeric(10,1) [
    note: 'Fold change comparing to wild type'
  ]
  potency_type potency_type_enum [
    note: 'Potency type (e.g. IC50, IC90)'
  ]
  control_potency numeric(10,3) [
    note: 'Potency against control isolate'
  ]
  potency numeric(10,3) [
    note: 'Potency against experimental isolate'
  ]
  potency_unit potency_unit_enum [
    note: 'Unit used by the control & exp potency value. Can be ng/ml, µM or pM'
  ]
  resistance_level resistance_level_enum [
    note: 'Qualitative result when quantitative result (fold change) is not available'
  ]
  ineffective ineffective_enum [
    note: 'Rx has no effect on control sequence or experimental sequence'
  ]
  cumulative_count int [
    default: 1,
    note: 'Cumulative count of matching results (when multiple)'
  ]
  assay_name varchar [ref: > A.assay_name]
  date_added date [not null]
  indexes {
    (rx_name, control_iso_name, iso_name, ref_name, potency_type, assay_name) [pk]
  }
}

Table invivo_selection_results {
  ref_name varchar
  rx_name varchar
  dosage numeric(2,0)
  dosage_unit antibody_dosage_unit_enum
  infected_var_name varchar [
    note: 'Variant of the infected isolate'
  ]
  timing numeric(4,0)  [note: "time after assumed infection date, Month"]
  num_subjects int
  num_subjects_with_mut int
  severity severity_enum
  gene varchar [
    note: 'Mutation gene'
  ]
  position int [
    note: 'Position of this mutation'
  ]
  amino_acid amino_acid_enum [
    note: 'Amino acid of this mutation'
  ]
  section varchar [
    note: 'The cited section in the reference; e.g. Figure 1, table 1 or page 1, para 4'
  ]
  note varchar
  date_added date [not null]

  indexes {
    (ref_name, rx_name, infected_var_name, timing, gene, position, amino_acid) [pk]
  }
}
